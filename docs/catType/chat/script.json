{
  "script": {
    "0": "        const version = \"3E9\";",
    "1": "",
    "2": "        const gradientStyle = `",
    "3": "            background-image: linear-gradient(67.5deg, #ff8659, #ffcbb8);",
    "4": "            -webkit-background-clip: text;",
    "5": "            background-clip: text;",
    "6": "            color: transparent;",
    "7": "            font-size: 24px;",
    "8": "            font-weight: bold;",
    "9": "            padding: 10px;",
    "10": "        `;",
    "11": "",
    "12": "        console.log(`%ccatTyper v.${version}`, gradientStyle);",
    "13": "        console.log(\"What are you doing here?\");",
    "14": "        console.log(\"To not see IRC messages, run the page with the Query parameter \\\"&NOIRC\\\" or enter in the console: irc_disable = true;\");",
    "15": "        console.log(\"To not see chat messages in console, run the page with the Query parameter \\\"&NOCONSOLECHAT\\\" or enter in the console: console_chat_disable = true;\");",
    "16": "        console.log(\"To not see console messages time, run the page with the Query parameter \\\"&NOCONSOLETIME\\\" or enter in the console: console_timestamp_disable = true;\");",
    "17": "        console.log(\"\");",
    "18": "",
    "19": "        // SETTINGS",
    "20": "        const params = new URLSearchParams(window.location.search);",
    "21": "",
    "22": "        let token = '';",
    "23": "        let login = '';",
    "24": "        let maxHistorySize = 0;",
    "25": "        let timeFormat = '';",
    "26": "        let emotesSize = 0.00;",
    "27": "        let enabledThirdPartyEmotes = [];",
    "28": "        let irc_disable = false;",
    "29": "        let console_chat_disable = false;",
    "30": "        let console_timestamp_disable = false;",
    "31": "",
    "32": "        if (typeof catTyper !== 'undefined') {",
    "33": "            const selected_account = JSON.parse(catTyper.getSetting('selected_account'));",
    "34": "            token = JSON.parse(catTyper.getSetting('accounts'))[selected_account].token;",
    "35": "            login = JSON.parse(catTyper.getSetting('accounts'))[selected_account].login;",
    "36": "            maxHistorySize = JSON.parse(catTyper.getSetting('chat.message_limit'));",
    "37": "            timeFormat = JSON.parse(catTyper.getSetting('chat.timestamp_format'));",
    "38": "            emotesSize = JSON.parse(catTyper.getSetting('emote.size'));",
    "39": "            irc_disable = JSON.parse(catTyper.getSetting('debug.noirc'));",
    "40": "            console_chat_disable = JSON.parse(catTyper.getSetting('debug.noconsolechat'));",
    "41": "            console_timestamp_disable = JSON.parse(catTyper.getSetting('debug.noconsoletime'));",
    "42": "",
    "43": "            enabledThirdPartyEmotes = ['7TV', 'BTTV', 'FFZ'].reduce((acc, emote) => {",
    "44": "                const path = `emote.disable_third_party.${emote.toLowerCase()}`;",
    "45": "                try {",
    "46": "                    if (!JSON.parse(catTyper.getSetting(path))) {",
    "47": "                        acc.push(emote);",
    "48": "                    }",
    "49": "                } catch {",
    "50": "                    acc.push(emote);",
    "51": "                }",
    "52": "                return acc;",
    "53": "            }, []);",
    "54": "        } else {",
    "55": "            token = params.get('token');",
    "56": "            login = params.get('login');",
    "57": "            maxHistorySize = parseInt(params.get('history_size')) || 1000;",
    "58": "            timeFormat = params.get('time_format') || 'HH:mm:ss';",
    "59": "            emotesSize = parseFloat(params.get('emotes_size')) || 1.25;",
    "60": "            enabledThirdPartyEmotes = params.get('third_party_emotes')?.split(',') || [];",
    "61": "            irc_disable = params.get('NOIRC') !== null;",
    "62": "            console_chat_disable = params.get('NOCONSOLECHAT') !== null;",
    "63": "            console_timestamp_disable = params.get('NOCONSOLETIME') !== null;",
    "64": "        }",
    "65": "",
    "66": "        // TOKENS",
    "67": "        const clientId = 'xrs6iz7t6zk7z5dfrzad4mn1e4bzln'; // Dont forget to delete that! TomFoolery TeaTime",
    "68": "",
    "69": "        // HTML ELEMENTS",
    "70": "        const chatEl = document.getElementById('chat');",
    "71": "        const inputEl = document.getElementById('message-input');",
    "72": "        inputEl.style.display = 'none';",
    "73": "",
    "74": "        // OTHER",
    "75": "        let socket;",
    "76": "        let reconnectAttempts = 0;",
    "77": "        let channels = {};",
    "78": "        let pingers = [",
    "79": "            { ignoreCase: true, text: login }",
    "80": "        ];",
    "81": "        let activeChannel = null;",
    "82": "        const maxReconnectAttempts = 5;",
    "83": "        const startTime = new Date();",
    "84": "        let lastSent = { message: null, channel: null };",
    "85": "",
    "86": "        // For global emotes and badges",
    "87": "        channels[\"global\"] = {",
    "88": "            chat: null,",
    "89": "            messages: null,",
    "90": "            emotes: {},",
    "91": "            badges: {},",
    "92": "            tab: null",
    "93": "        };",
    "94": "",
    "95": "        // Category: main",
    "96": "        if (clientId && token) {",
    "97": "            log('Hello world!', 'INIT');",
    "98": "            init();",
    "99": "        }",
    "100": "",
    "101": "        function connect() {",
    "102": "            log('Creating connection to twitch.tv...', 'SOCK');",
    "103": "            socket = new WebSocket('wss://irc-ws.chat.twitch.tv:443');",
    "104": "",
    "105": "            socket.onopen = () => {",
    "106": "                log('Hello, twitch.tv!', 'SOCK');",
    "107": "                sendSocket(`PASS oauth:${token}`);",
    "108": "                sendSocket(`NICK ${login}`);",
    "109": "                sendSocket('CAP REQ :twitch.tv/membership twitch.tv/tags twitch.tv/commands');",
    "110": "                reconnectAttempts = 0;",
    "111": "            };",
    "112": "",
    "113": "            socket.onmessage = (event) => {",
    "114": "                const line = event.data.trim();",
    "115": "                if (!irc_disable) {",
    "116": "                    log(line, 'SOCK-RECEIVED');",
    "117": "                }",
    "118": "",
    "119": "                if (line.startsWith('PING')) {",
    "120": "                    log('🏓 Ponged!', 'SOCK');",
    "121": "                    sendSocket('PONG');",
    "122": "                    return;",
    "123": "                }",
    "124": "",
    "125": "                const parsed = parseIRCMessage(line);",
    "126": "",
    "127": "                switch (parsed.command) {",
    "128": "                    case 'PRIVMSG':",
    "129": "                        const username = parsed.tags['display-name'] || parsed.tags.username || 'User';",
    "130": "                        const message = parsed.params[1];",
    "131": "                        addMessage(message, parsed.tags, true, parsed.channel);",
    "132": "                        break;",
    "133": "",
    "134": "                    case 'NOTICE':",
    "135": "                        if (parsed.params[1].includes('Login authentication failed')) {",
    "136": "                            alert('Authentication failed');",
    "137": "                        }",
    "138": "                        break;",
    "139": "",
    "140": "                    case 'CLEARCHAT':",
    "141": "                        if (parsed.params[1]) {",
    "142": "                            const user = parsed.params[1];",
    "143": "                            const chatContainer = document.getElementById(`chat-${parsed.channel}`);",
    "144": "",
    "145": "                            if (chatContainer) {",
    "146": "                                const messages = chatContainer.querySelectorAll(`.message`);",
    "147": "                                messages.forEach(message => {",
    "148": "                                    const usernameElem = message.querySelector('.username');",
    "149": "                                    if (usernameElem && usernameElem.textContent.trim().toLowerCase().replace(': ', '') === user.toLowerCase()) {",
    "150": "                                        message.classList.add('deleted');",
    "151": "                                    }",
    "152": "                                });",
    "153": "                            }",
    "154": "",
    "155": "                            if (parsed.tags && parsed.tags['ban-duration']) {",
    "156": "                                const duration = parseInt(parsed.tags['ban-duration'], 10);",
    "157": "                                const durationStr = formatDuration(duration);",
    "158": "                                addSystemMessage(`@${user} was timed out from chat for ${durationStr}`, parsed.channel);",
    "159": "                            } else {",
    "160": "                                addSystemMessage(`@${user} has been banned`, parsed.channel);",
    "161": "                            }",
    "162": "                        } else {",
    "163": "                            addSystemMessage('Chat was cleared', parsed.channel);",
    "164": "                        }",
    "165": "                        break;",
    "166": "                    case 'USERSTATE':",
    "167": "                        if (lastSent.message && lastSent.channel) {",
    "168": "                            addMessage(lastSent.message, parsed.tags, true, lastSent.channel);",
    "169": "                            lastSent = { message: null, channel: null };",
    "170": "                        }",
    "171": "                        break;",
    "172": "                    case 'USERNOTICE':",
    "173": "                        if (parsed.tags['msg-id'] === 'announcement') {",
    "174": "                            const user = parsed.tags['display-name'] || parsed.tags.username || 'Unknown';",
    "175": "                            const announcementMessage = parsed.params[1] || '';",
    "176": "                            const header = '📢 Announcement';",
    "177": "",
    "178": "                            addMessage(",
    "179": "                                announcementMessage,",
    "180": "                                parsed.tags,",
    "181": "                                true,",
    "182": "                                parsed.channel,",
    "183": "                                'announce',",
    "184": "                                header",
    "185": "                            );",
    "186": "                        }",
    "187": "                        break;",
    "188": "                }",
    "189": "            };",
    "190": "",
    "191": "            socket.onclose = (event) => {",
    "192": "                log('Connection closed. Monka! ' + event.reason, 'SOCK');",
    "193": "                channels.forEach(function (value, key) {",
    "194": "                    if (value.chat) {",
    "195": "                        addSystemMessage('Disconnected', key);",
    "196": "                    }",
    "197": "                });",
    "198": "",
    "199": "                setTimeout(() => {",
    "200": "                    reconnectAttempts++;",
    "201": "                    channels.forEach(function (value, key) {",
    "202": "                        if (value.chat) {",
    "203": "                            addSystemMessage(`Reconnecting...`, key);",
    "204": "                        }",
    "205": "                    });",
    "206": "                    log(`Reconnecting...`, 'SOCK');",
    "207": "                    connect();",
    "208": "                }, 5000);",
    "209": "            };",
    "210": "",
    "211": "            socket.onerror = (error) => {",
    "212": "                console.error('WebSocket Error:', error);",
    "213": "                socket.close();",
    "214": "            };",
    "215": "        }",
    "216": "",
    "217": "        // Category: UTILS",
    "218": "        // |========= EMOTES =========|",
    "219": "        function replaceEmotes(text, emotes, channel) {",
    "220": "            text = escapeHTML(text);",
    "221": "            const originalText = text;",
    "222": "            text = text.replace(/(https?:\\/\\/[^\\s]+)/g, '<a href=\"$1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">$1</a>');",
    "223": "",
    "224": "            // 1. Обработка эмодзи канала",
    "225": "            let parts = processChannelEmotes(text, channel);",
    "226": "",
    "227": "            // 2. Обработка глобальных сторонних эмодзи",
    "228": "            parts = processGlobalThirdPartyEmotes(parts, channel);",
    "229": "",
    "230": "            parts = parts.filter(item => item !== '' && item !== ' ');",
    "231": "",
    "232": "            // 3. Обработка Twitch-эмодзи",
    "233": "            parts = processTwitchEmotes(parts, emotes, originalText);",
    "234": "",
    "235": "            return parts.join(' ');",
    "236": "        }",
    "237": "",
    "238": "        function processChannelEmotes(text, channel) {",
    "239": "            const parts = [];",
    "240": "            if (Object.keys(channels[channel].emotes).length === 0) {",
    "241": "                return text.split(' ').flatMap(word => [word, ' ']).slice(0, -1);",
    "242": "            }",
    "243": "",
    "244": "            const words = text.split(' ');",
    "245": "            for (let i = 0; i < words.length; i++) {",
    "246": "                const word = words[i];",
    "247": "                if (channels[channel].emotes[word]) {",
    "248": "                    const img = document.createElement('img');",
    "249": "                    img.className = 'emote';",
    "250": "                    img.src = channels[channel].emotes[word].url;",
    "251": "                    img.style.height = `${1.5 * emotesSize}em`;",
    "252": "                    img.loading = 'lazy';",
    "253": "                    img.title = formatEmoteTitle(channels[channel].emotes[word]);",
    "254": "                    parts.push(img.outerHTML);",
    "255": "                } else {",
    "256": "                    parts.push(word);",
    "257": "                }",
    "258": "                if (i < words.length - 1) parts.push(' ');",
    "259": "            }",
    "260": "",
    "261": "            return parts;",
    "262": "        }",
    "263": "",
    "264": "        function processGlobalThirdPartyEmotes(parts, channel) {",
    "265": "            if (Object.keys(channels[\"global\"].emotes).length === 0) return parts;",
    "266": "",
    "267": "            const result = [];",
    "268": "            for (const part of parts) {",
    "269": "                if (part.startsWith('<img')) {",
    "270": "                    result.push(part);",
    "271": "                    continue;",
    "272": "                }",
    "273": "",
    "274": "                const words = part.split(' ');",
    "275": "                for (let i = 0; i < words.length; i++) {",
    "276": "                    const word = words[i];",
    "277": "                    if (channels[\"global\"].emotes[word]) {",
    "278": "                        const img = document.createElement('img');",
    "279": "                        img.className = 'emote';",
    "280": "                        img.src = channels[\"global\"].emotes[word].url;",
    "281": "                        img.style.height = `${1.5 * emotesSize}em`;",
    "282": "                        img.loading = 'lazy';",
    "283": "                        img.title = formatEmoteTitle(channels[\"global\"].emotes[word]);",
    "284": "                        result.push(img.outerHTML);",
    "285": "                    } else {",
    "286": "                        result.push(word);",
    "287": "                    }",
    "288": "                    if (i < words.length - 1) result.push(' ');",
    "289": "                }",
    "290": "            }",
    "291": "",
    "292": "            return result;",
    "293": "        }",
    "294": "",
    "295": "        function processTwitchEmotes(parts, emotes, originalText) {",
    "296": "            if (!emotes || !originalText) return parts;",
    "297": "",
    "298": "            const result = [...parts];",
    "299": "            const wordPositions = [];",
    "300": "",
    "301": "            let pos = 0;",
    "302": "            originalText.split(\" \").forEach((word, index) => {",
    "303": "                const start = pos;",
    "304": "                const end = pos + word.length;",
    "305": "                wordPositions.push({ start, end, index });",
    "306": "                pos = end + 1;",
    "307": "            });",
    "308": "",
    "309": "            const emoteList = [];",
    "310": "            emotes.split(\"/\").forEach(part => {",
    "311": "                const [id, positions] = part.split(\":\");",
    "312": "                positions.split(\",\").forEach(pos => {",
    "313": "                    const [start, end] = pos.split(\"-\").map(Number);",
    "314": "                    emoteList.push({ id, start, end });",
    "315": "                });",
    "316": "            });",
    "317": "",
    "318": "            emoteList.sort((a, b) => a.start - b.start);",
    "319": "",
    "320": "            emoteList.forEach(({ id, start, end }) => {",
    "321": "                for (let i = 0; i < wordPositions.length; i++) {",
    "322": "                    const { start: wordStart, end: wordEnd, index: wordIndex } = wordPositions[i];",
    "323": "",
    "324": "                    if (start >= wordStart && end <= wordEnd) {",
    "325": "                        const img = document.createElement(\"img\");",
    "326": "                        img.className = \"emote\";",
    "327": "                        img.loading = 'lazy';",
    "328": "                        img.src = `https://static-cdn.jtvnw.net/emoticons/v2/${id}/default/dark/3.0`;",
    "329": "                        img.style.height = `${1.5 * emotesSize}em`;",
    "330": "",
    "331": "                        result[wordIndex] = img.outerHTML;",
    "332": "                        break;",
    "333": "                    }",
    "334": "                }",
    "335": "            });",
    "336": "",
    "337": "            return result;",
    "338": "        }",
    "339": "",
    "340": "        function formatEmoteTitle(emoteData) {",
    "341": "            return `${emoteData.name}",
    "342": "${emoteData.type} ${emoteData.service} emote",
    "343": "By ${emoteData.author}${emoteData.original_name !== emoteData.name ? `\\nOriginal name: ${emoteData.original_name}` : ''}`;",
    "344": "        }",
    "345": "",
    "346": "        function escapeHTML(text) {",
    "347": "            return text",
    "348": "                .replaceAll(/[&<>\"']/g, (match) => ({",
    "349": "                    '&': '&amp;',",
    "350": "                    '<': '&lt;',",
    "351": "                    '>': '&gt;',",
    "352": "                    '\"': '&quot;',",
    "353": "                    \"'\": '&#39;'",
    "354": "                }[match]));",
    "355": "        }",
    "356": "        // |==========================|",
    "357": "",
    "358": "",
    "359": "        // |===== USERNAME COLOR =====|",
    "360": "        const colorMapping = {",
    "361": "            \"#0000FF\": \"#5678fc\",    // Blue",
    "362": "            \"#8A2BE2\": \"#b24dff\",    // BlueViolet",
    "363": "            \"#5F9EA0\": \"#5ea0c4\",    // CadetBlue",
    "364": "            \"#D2691E\": \"#fc8530\",    // Chocolate",
    "365": "            \"#FF7F50\": \"#fa895f\",    // Coral",
    "366": "            \"#1E90FF\": \"#3b9eff\",    // DodgerBlue",
    "367": "            \"#B22222\": \"#ff4a4a\",    // FireBrick",
    "368": "            \"#DAA520\": \"#ffce54\",    // GoldenRod",
    "369": "            \"#00FF00\": \"#82ff82\",    // Green",
    "370": "            \"#FF69B4\": \"#FF69B4\",    // HotPink",
    "371": "            \"#FF4500\": \"#ff6e38\",    // OrangeRed",
    "372": "            \"#FF0000\": \"#ff4242\",    // Red",
    "373": "            \"#2E8B57\": \"#499e6e\",    // SeaGreen",
    "374": "            \"#00FF7F\": \"#3dff9e\",    // SpringGreen",
    "375": "            \"#9ACD32\": \"#c3f759\",    // YellowGreen",
    "376": "        };",
    "377": "",
    "378": "        function getCustomColor(hex) {",
    "379": "            return colorMapping[hex] || hex; // Используем кастомный цвет или оригинальный",
    "380": "        }",
    "381": "        // |==========================|",
    "382": "",
    "383": "",
    "384": "        // |========= SOCKET =========|",
    "385": "        function sendSocket(data) {",
    "386": "            if (socket && socket.readyState === WebSocket.OPEN) {",
    "387": "                socket.send(data);",
    "388": "",
    "389": "                if (!irc_disable) {",
    "390": "                    log(data, 'SOCK SEND');",
    "391": "                }",
    "392": "            }",
    "393": "            else {",
    "394": "                log(`Tried to send message, but socket is not open!`, 'SOCK SEND');",
    "395": "            }",
    "396": "        }",
    "397": "",
    "398": "        function sendMessage(message, channel) {",
    "399": "            if (socket && socket.readyState === WebSocket.OPEN) {",
    "400": "                lastSent = { message: message, channel: channel };",
    "401": "                sendSocket(`PRIVMSG #${channel} :${message}`);",
    "402": "                log(`Sended message to #${channel}: ${message}`, 'SM');",
    "403": "            }",
    "404": "            else {",
    "405": "                log(`Tried to send message, but socket is not open!`, 'SM');",
    "406": "            }",
    "407": "        }",
    "408": "        // |==========================|",
    "409": "",
    "410": "",
    "411": "        // |========= BADGES =========|",
    "412": "        function processBadgeData(data, channel) {",
    "413": "            data.data.forEach(badge => {",
    "414": "                badge.versions.forEach(version => {",
    "415": "                    const key = `${badge.set_id}/${version.id}`;",
    "416": "                    channels[channel].badges[key] = version.image_url_4x;",
    "417": "                });",
    "418": "            });",
    "419": "        }",
    "420": "",
    "421": "        async function loadBadges(clientId, token, broadcasterId, channel) {",
    "422": "            try {",
    "423": "                log(`Loading badges for #${channel} (${broadcasterId})...`, 'LB');",
    "424": "                if (broadcasterId) {",
    "425": "                    const channelRes = await fetch(`https://api.twitch.tv/helix/chat/badges?broadcaster_id=${broadcasterId}`, {",
    "426": "                        headers: {",
    "427": "                            'Client-ID': clientId,",
    "428": "                            'Authorization': `Bearer ${token}`",
    "429": "                        }",
    "430": "                    });",
    "431": "                    const channelData = await channelRes.json();",
    "432": "                    processBadgeData(channelData, channel);",
    "433": "                    log(`Loaded! Quantity: ${Object.keys(channels[channel].badges).length}`, 'LB');",
    "434": "                }",
    "435": "            } catch (error) {",
    "436": "                log(`Error loading local badges: ${error.message}`, 'LB');",
    "437": "                console.error(error);",
    "438": "            }",
    "439": "        }",
    "440": "",
    "441": "        async function loadGlobalBadges(clientId, token) {",
    "442": "            try {",
    "443": "                log(`Loading global badges...`, 'LGB');",
    "444": "                const globalRes = await fetch('https://api.twitch.tv/helix/chat/badges/global', {",
    "445": "                    headers: {",
    "446": "                        'Client-ID': clientId,",
    "447": "                        'Authorization': `Bearer ${token}`",
    "448": "                    }",
    "449": "                });",
    "450": "                const globalData = await globalRes.json();",
    "451": "                processBadgeData(globalData, \"global\");",
    "452": "                log(`Loaded! Quantity: ${Object.keys(channels['global'].badges).length}`, 'LGB');",
    "453": "            } catch (error) {",
    "454": "                log(`Error loading global badges: ${error.message}`, 'LB');",
    "455": "                console.error(error);",
    "456": "            }",
    "457": "        }",
    "458": "",
    "459": "        function parseBadges(badgesStr) {",
    "460": "            if (!badgesStr) return [];",
    "461": "            return badgesStr.split(',').map(badge => {",
    "462": "                const [setId, version] = badge.split('/');",
    "463": "                return { setId, version };",
    "464": "            });",
    "465": "        }",
    "466": "        // |==========================|",
    "467": "",
    "468": "",
    "469": "        // |========== CHAT ==========|",
    "470": "        function addSystemMessage(text, channel) {",
    "471": "            const msgDiv = document.createElement('div');",
    "472": "            msgDiv.className = 'message';",
    "473": "",
    "474": "            const timeSpan = document.createElement('span');",
    "475": "            timeSpan.className = 'timestamp';",
    "476": "            timeSpan.textContent = formatTime(Date.now());",
    "477": "            msgDiv.appendChild(timeSpan);",
    "478": "",
    "479": "            const systemSpan = document.createElement('span');",
    "480": "            systemSpan.style.color = '#888';",
    "481": "            systemSpan.textContent = text;",
    "482": "            msgDiv.appendChild(systemSpan);",
    "483": "",
    "484": "            if (!console_chat_disable) {",
    "485": "                log(`@S #${channel} system: ${text}`, 'CHAT');",
    "486": "            }",
    "487": "",
    "488": "            const chatEl = channels[channel].chat;",
    "489": "            if (!chatEl) {",
    "490": "                chatEl = document.getElementById(`chat-${channel}`);",
    "491": "            }",
    "492": "",
    "493": "            const atBottom = chatEl.scrollTop + chatEl.clientHeight >= chatEl.scrollHeight - 5;",
    "494": "",
    "495": "            chatEl.appendChild(msgDiv);",
    "496": "",
    "497": "            if (atBottom) {",
    "498": "                chatEl.scrollTop = chatEl.scrollHeight;",
    "499": "            }",
    "500": "",
    "501": "            if (chatEl.children.length > maxHistorySize) {",
    "502": "                chatEl.removeChild(chatEl.firstElementChild);",
    "503": "            }",
    "504": "        }",
    "505": "",
    "506": "        inputEl.addEventListener('keypress', (e) => {",
    "507": "            if (e.key === 'Enter' && inputEl.value.trim()) {",
    "508": "                sendMessage(inputEl.value, activeChannel);",
    "509": "                inputEl.value = '';",
    "510": "            }",
    "511": "        }); // Read send",
    "512": "",
    "513": "        function addMessage(message, tags, isAppend, channel, extraClasses = '', headerText = '') {",
    "514": "            const msgDiv = document.createElement('div');",
    "515": "            msgDiv.className = `message ${extraClasses}`.trim();",
    "516": "            const originalMessage = message;",
    "517": "",
    "518": "            if (headerText) {",
    "519": "                const headerSpan = document.createElement('div');",
    "520": "                headerSpan.className = 'message-header';",
    "521": "                headerSpan.textContent = headerText;",
    "522": "                msgDiv.appendChild(headerSpan);",
    "523": "            }",
    "524": "",
    "525": "            let msgInfo = '';",
    "526": "",
    "527": "            // Store message ID for replies",
    "528": "            if (tags['id']) {",
    "529": "                msgDiv.id = `msg-${tags['id']}`;",
    "530": "            }",
    "531": "",
    "532": "            let isAction = false;",
    "533": "            if (message.startsWith('\\x01ACTION') && message.endsWith('\\x01')) {",
    "534": "                isAction = true;",
    "535": "                message = message.slice(8, -1);",
    "536": "                msgInfo += 'M';",
    "537": "            }",
    "538": "",
    "539": "            // Reply handling",
    "540": "            const parentId = tags['reply-parent-msg-id'];",
    "541": "            if (parentId) {",
    "542": "                msgInfo += 'R';",
    "543": "                const parentMsg = document.getElementById(`msg-${parentId}`);",
    "544": "                if (parentMsg) {",
    "545": "                    const replyRef = document.createElement('div');",
    "546": "                    replyRef.className = 'reply-reference';",
    "547": "",
    "548": "                    let msg = parentMsg.querySelector('.message-content').textContent;",
    "549": "",
    "550": "                    replyRef.innerHTML = `→ In reply to ${parentMsg.querySelector('.username').textContent}${msg.slice(0, 75) + (msg === msg.slice(0, 72) ? \"\" : \"...\")}`;",
    "551": "                    replyRef.style.cssText = \"margin-left: 10px; padding-left: 10px; border-left: 1px solid #555; cursor: pointer; font-style: italic;\";",
    "552": "",
    "553": "                    replyRef.addEventListener('click', () => {",
    "554": "                        parentMsg.scrollIntoView({ behavior: 'smooth', block: 'center' });",
    "555": "",
    "556": "                        parentMsg.classList.add('highlight');",
    "557": "                        setTimeout(() => {",
    "558": "                            parentMsg.classList.remove('highlight');",
    "559": "                        }, 1000);",
    "560": "                    });",
    "561": "",
    "562": "                    msgDiv.appendChild(replyRef);",
    "563": "                    message = message.slice(parentMsg.querySelector('.username').textContent.replaceAll(': ', '').length + 2);",
    "564": "                }",
    "565": "            }",
    "566": "",
    "567": "            // time",
    "568": "            const timeSpan = document.createElement('span');",
    "569": "            timeSpan.className = 'timestamp';",
    "570": "            timeSpan.textContent = formatTime(tags['tmi-sent-ts'] ? parseInt(tags['tmi-sent-ts']) : Date.now());",
    "571": "            msgDiv.appendChild(timeSpan);",
    "572": "",
    "573": "            // badges",
    "574": "            const badgesContainer = document.createElement('span');",
    "575": "            badgesContainer.className = 'badges';",
    "576": "            if (tags.badges) {",
    "577": "                const badges = parseBadges(tags.badges);",
    "578": "                badges.forEach(badge => {",
    "579": "                    const badgeUrl = channels[channel].badges[`${badge.setId}/${badge.version}`];",
    "580": "                    const badgeGlobalUrl = channels['global'].badges[`${badge.setId}/${badge.version}`];",
    "581": "                    if (badgeUrl || badgeGlobalUrl) {",
    "582": "                        const img = document.createElement('img');",
    "583": "                        if (badgeUrl) {",
    "584": "                            img.src = badgeUrl;",
    "585": "                        } else {",
    "586": "                            img.src = badgeGlobalUrl;",
    "587": "                        }",
    "588": "                        img.className = 'badge';",
    "589": "                        img.title = badge.setId;",
    "590": "                        badgesContainer.appendChild(img);",
    "591": "                    }",
    "592": "                });",
    "593": "            }",
    "594": "            msgDiv.appendChild(badgesContainer);",
    "595": "",
    "596": "            // username",
    "597": "            const userSpan = document.createElement('span');",
    "598": "            userSpan.className = 'username';",
    "599": "            const originalColor = tags['color'] || '#b3b3b3';",
    "600": "            const customColor = getCustomColor(originalColor);",
    "601": "            userSpan.style.color = customColor;",
    "602": "            userSpan.textContent = (tags['display-name'] || tags.username || 'undefined') + (isAction ? ' ' : ': ');",
    "603": "            msgDiv.appendChild(userSpan);",
    "604": "",
    "605": "            // message",
    "606": "            const messageSpan = document.createElement('span');",
    "607": "            messageSpan.className = 'message-content';",
    "608": "            messageSpan.innerHTML = replaceEmotes(message, tags['emotes'], channel);",
    "609": "            if (isAction) {",
    "610": "                messageSpan.style.color = customColor;",
    "611": "            }",
    "612": "            msgDiv.appendChild(messageSpan);",
    "613": "",
    "614": "            for (const { ignoreCase, text } of pingers) {",
    "615": "                const message = ignoreCase ? originalMessage.toLowerCase() : originalMessage;",
    "616": "                const target = ignoreCase ? text.toLowerCase() : text;",
    "617": "",
    "618": "                if (message.includes(target)) {",
    "619": "                    msgDiv.classList.add('ping');",
    "620": "                    break;",
    "621": "                }",
    "622": "            }",
    "623": "",
    "624": "            const tabEl = channels[channel].tab;",
    "625": "",
    "626": "            if (!tabEl) {",
    "627": "                tabEl = document.getElementById(`tab-${channel}`);",
    "628": "            }",
    "629": "",
    "630": "            if (!tabEl.classList.contains('active')) {",
    "631": "                for (const { ignoreCase, text } of pingers) {",
    "632": "                    const message = ignoreCase ? originalMessage.toLowerCase() : originalMessage;",
    "633": "                    const target = ignoreCase ? text.toLowerCase() : text;",
    "634": "",
    "635": "                    if (message.includes(target)) {",
    "636": "                        tabEl.classList.add('ping');",
    "637": "                        break;",
    "638": "                    }",
    "639": "                }",
    "640": "",
    "641": "                if (!tabEl.classList.contains('ping')) {",
    "642": "                    tabEl.classList.add('messages');",
    "643": "                }",
    "644": "            }",
    "645": "",
    "646": "            const chatEl = channels[channel].chat;",
    "647": "",
    "648": "            if (!chatEl) {",
    "649": "                chatEl = document.getElementById(`chat-${channel}`);",
    "650": "            }",
    "651": "",
    "652": "            const atBottom = chatEl.scrollTop + chatEl.clientHeight >= chatEl.scrollHeight - 5;",
    "653": "",
    "654": "            if (isAppend) {",
    "655": "                chatEl.appendChild(msgDiv);",
    "656": "            } else {",
    "657": "                chatEl.prepend(msgDiv);",
    "658": "            }",
    "659": "",
    "660": "            if (atBottom) {",
    "661": "                chatEl.scrollTop = chatEl.scrollHeight;",
    "662": "            }",
    "663": "",
    "664": "            // Message limit",
    "665": "            if (chatEl.children.length > maxHistorySize) {",
    "666": "                chatEl.removeChild(chatEl.firstElementChild);",
    "667": "            }",
    "668": "",
    "669": "            if (!console_chat_disable) {",
    "670": "                log(`@${msgInfo} #${channel} ${tags['display-name'] || tags.username || 'undefined'}: ${message}`, 'CHAT');",
    "671": "            }",
    "672": "        }",
    "673": "",
    "674": "        function formatTime(timestamp) {",
    "675": "            const date = new Date(timestamp);",
    "676": "            const hours = String(date.getHours()).padStart(2, '0');",
    "677": "            const minutes = String(date.getMinutes()).padStart(2, '0');",
    "678": "            const seconds = String(date.getSeconds()).padStart(2, '0');",
    "679": "            const miliseconds = String(date.getMilliseconds()).padStart(2, '0');",
    "680": "",
    "681": "            return timeFormat",
    "682": "                .replace('HH', hours)",
    "683": "                .replace('mm', minutes)",
    "684": "                .replace('ss', seconds)",
    "685": "                .replace('SSS', miliseconds);",
    "686": "        }",
    "687": "",
    "688": "        function parseIRCMessage(line) {",
    "689": "            const tags = {};",
    "690": "            let prefix = '';",
    "691": "            let command = '';",
    "692": "            let params = [];",
    "693": "            let channel = undefined;",
    "694": "",
    "695": "            // tags",
    "696": "            if (line.startsWith('@')) {",
    "697": "                const tagEnd = line.indexOf(' ');",
    "698": "                const tagString = line.slice(1, tagEnd);",
    "699": "                line = line.slice(tagEnd + 1);",
    "700": "",
    "701": "                tagString.split(';').forEach(tag => {",
    "702": "                    const [key, value] = tag.split('=');",
    "703": "                    tags[key] = value || '';",
    "704": "                });",
    "705": "            }",
    "706": "",
    "707": "            // prefix",
    "708": "            if (line.startsWith(':')) {",
    "709": "                const prefixEnd = line.indexOf(' ');",
    "710": "                prefix = line.slice(1, prefixEnd);",
    "711": "                line = line.slice(prefixEnd + 1);",
    "712": "            }",
    "713": "",
    "714": "            // command",
    "715": "            const commandEnd = line.indexOf(' ');",
    "716": "            command = line.slice(0, commandEnd);",
    "717": "            line = line.slice(commandEnd + 1);",
    "718": "",
    "719": "            // parameters",
    "720": "            while (line.length > 0) {",
    "721": "                if (line.startsWith(':')) {",
    "722": "                    params.push(line.slice(1));",
    "723": "                    line = '';",
    "724": "                } else {",
    "725": "                    const spaceIndex = line.indexOf(' ');",
    "726": "                    if (spaceIndex === -1) {",
    "727": "                        params.push(line);",
    "728": "                        line = '';",
    "729": "                    } else {",
    "730": "                        params.push(line.slice(0, spaceIndex));",
    "731": "                        line = line.slice(spaceIndex + 1);",
    "732": "                    }",
    "733": "                }",
    "734": "            }",
    "735": "            ",
    "736": "            if ((command === 'PRIVMSG' || command === 'CLEARCHAT' || command === 'USERNOTICE') && params.length > 0) {",
    "737": "                channel = params[0].replace('#', '');",
    "738": "            }",
    "739": "",
    "740": "            return {",
    "741": "                tags,",
    "742": "                prefix,",
    "743": "                command,",
    "744": "                params,",
    "745": "                channel",
    "746": "            };",
    "747": "        }",
    "748": "",
    "749": "        async function loadHistoricalMessages(channel) {",
    "750": "            if (!channel) return;",
    "751": "",
    "752": "            try {",
    "753": "                log(`Getting for #${channel}...`, 'HISTORY');",
    "754": "                const res = await fetch(`https://recent-messages.robotty.de/api/v2/recent-messages/${channel}`, {",
    "755": "                    headers: { 'Accept': 'application/json' }",
    "756": "                });",
    "757": "",
    "758": "                if (!res.ok) throw new Error('HTTP error ' + res.status);",
    "759": "",
    "760": "                const data = await res.json();",
    "761": "                if (data.error) throw new Error(data.error);",
    "762": "",
    "763": "                // Process messages in reverse to maintain order",
    "764": "                for (const line of data.messages) {",
    "765": "                    const parsed = parseIRCMessage(line.trim());",
    "766": "                    if (parsed.command === 'PRIVMSG') {",
    "767": "                        addMessage(parsed.params[1], parsed.tags, true, channel);",
    "768": "                    } else if (parsed.command === 'CLEARCHAT') {",
    "769": "                        if (parsed.params[1]) {",
    "770": "                            const user = parsed.params[1];",
    "771": "                            const chatContainer = document.getElementById(`chat-${parsed.channel}`);",
    "772": "",
    "773": "                            if (chatContainer) {",
    "774": "                                const messages = chatContainer.querySelectorAll(`.message`);",
    "775": "                                messages.forEach(message => {",
    "776": "                                    const usernameElem = message.querySelector('.username');",
    "777": "                                    if (usernameElem && usernameElem.textContent.trim().toLowerCase().replaceAll(':', '').replaceAll(' ', '') === user.toLowerCase()) {",
    "778": "                                        message.classList.add('deleted');",
    "779": "                                    }",
    "780": "                                });",
    "781": "                            }",
    "782": "",
    "783": "                            if (parsed.tags && parsed.tags['ban-duration']) {",
    "784": "                                const duration = parseInt(parsed.tags['ban-duration'], 10);",
    "785": "                                const durationStr = formatDuration(duration);",
    "786": "                                addSystemMessage(`@${user} was timed out from chat for ${durationStr}`, parsed.channel);",
    "787": "                            } else {",
    "788": "                                addSystemMessage(`@${user} has been banned`, parsed.channel);",
    "789": "                            }",
    "790": "                        } else {",
    "791": "                            addSystemMessage('Chat was cleared', parsed.channel);",
    "792": "                        }",
    "793": "                    } else if (parsed.command === 'USERNOTICE') {",
    "794": "                        if (parsed.tags['msg-id'] === 'announcement') {",
    "795": "                            const user = parsed.tags['display-name'] || parsed.tags.username || 'Unknown';",
    "796": "                            const announcementMessage = parsed.params[1] || '';",
    "797": "                            const header = '📢 Announcement';",
    "798": "",
    "799": "                            addMessage(",
    "800": "                                announcementMessage,",
    "801": "                                parsed.tags,",
    "802": "                                true,",
    "803": "                                parsed.channel,",
    "804": "                                'announce',",
    "805": "                                header",
    "806": "                            );",
    "807": "                        }",
    "808": "                    }",
    "809": "                }",
    "810": "                log(`Loaded for #${channel}!`, 'HISTORY');",
    "811": "            } catch (error) {",
    "812": "                addSystemMessage('History load failed: ' + error.message, channel);",
    "813": "                log(`Error loading for #${channel}!`, 'HISTORY');",
    "814": "                console.error(error);",
    "815": "            }",
    "816": "        }",
    "817": "",
    "818": "        function formatDuration(seconds) {",
    "819": "            if (seconds < 60) {",
    "820": "                return `${seconds} second${seconds === 1 ? '' : 's'}`;",
    "821": "            } else if (seconds < 3600) {",
    "822": "                const minutes = Math.floor(seconds / 60);",
    "823": "                return `${minutes} minute${minutes === 1 ? '' : 's'}`;",
    "824": "            } else if (seconds < 86400) {",
    "825": "                const hours = Math.floor(seconds / 3600);",
    "826": "                return `${hours} hour${hours === 1 ? '' : 's'}`;",
    "827": "            } else {",
    "828": "                const days = Math.floor(seconds / 86400);",
    "829": "                return `${days} day${days === 1 ? '' : 's'}`;",
    "830": "            }",
    "831": "        }",
    "832": "        // |==========================|",
    "833": "",
    "834": "",
    "835": "        // |======= TWITCH API =======|",
    "836": "        async function getBroadcasterId(channelName, clientId, token) {",
    "837": "            log(`Getting #${channelName} id...`, 'GBI');",
    "838": "            const res = await fetch(`https://api.twitch.tv/helix/users?login=${channelName}`, {",
    "839": "                headers: {",
    "840": "                    'Client-ID': clientId,",
    "841": "                    'Authorization': `Bearer ${token}`",
    "842": "                }",
    "843": "            });",
    "844": "            const data = await res.json();",
    "845": "            log(`#${channelName} → ${data.data[0]?.id}`, 'GBI');",
    "846": "            return data.data[0]?.id;",
    "847": "        }",
    "848": "        // |==========================|",
    "849": "",
    "850": "",
    "851": "        // |=== THIRD PARTY EMOTES ===|",
    "852": "        // #GLOBAL EMOTES",
    "853": "        async function loadGlobalThirdPartyEmotes() {",
    "854": "            log(`Loading global third party emotes... (${enabledThirdPartyEmotes.join(', ')})`, 'LGTPE');",
    "855": "            const promises = [];",
    "856": "",
    "857": "            if (enabledThirdPartyEmotes.includes('7TV')) {",
    "858": "                promises.push(loadGlobal7TVEmotes());",
    "859": "            }",
    "860": "            if (enabledThirdPartyEmotes.includes('BTTV')) {",
    "861": "                promises.push(loadGlobalBTTVEmotes());",
    "862": "            }",
    "863": "            if (enabledThirdPartyEmotes.includes('FFZ')) {",
    "864": "                promises.push(loadGlobalFFZEmotes());",
    "865": "            }",
    "866": "",
    "867": "            await Promise.allSettled(promises);",
    "868": "            log(`Loaded!`, 'LGTPE');",
    "869": "        }",
    "870": "",
    "871": "        async function loadGlobal7TVEmotes() {",
    "872": "            try {",
    "873": "                const globalRes = await fetch('https://7tv.io/v3/emote-sets/global');",
    "874": "                const globalData = await globalRes.json();",
    "875": "                process7TVEmotes(globalData.emotes, 'Global', 0, 'global');",
    "876": "            } catch (error) {",
    "877": "                console.error('7TV global emotes load error:', error);",
    "878": "                //addSystemMessage(\"7TV global emotes load error\");",
    "879": "            }",
    "880": "        }",
    "881": "",
    "882": "        async function loadGlobalBTTVEmotes() {",
    "883": "            try {",
    "884": "                const globalRes = await fetch('https://api.betterttv.net/3/cached/emotes/global');",
    "885": "                const globalData = await globalRes.json();",
    "886": "                processBTTVEmotes(globalData, 'Global', 0, 'global');",
    "887": "            } catch (error) {",
    "888": "                console.error('BTTV global emotes load error:', error);",
    "889": "                //addSystemMessage(\"BTTV global emotes load error\");",
    "890": "            }",
    "891": "        }",
    "892": "",
    "893": "        async function loadGlobalFFZEmotes() {",
    "894": "            try {",
    "895": "                const globalRes = await fetch('https://api.frankerfacez.com/v1/set/3');",
    "896": "                const globalData = await globalRes.json();",
    "897": "                processFFZEmotes(globalData.set.emoticons, 'Global', 0, 'global');",
    "898": "            } catch (error) {",
    "899": "                console.error('FFZ global emotes load error:', error);",
    "900": "                //addSystemMessage(\"FFZ global emotes load error\");",
    "901": "            }",
    "902": "        }",
    "903": "",
    "904": "        // #LOCAL EMOTES",
    "905": "        async function loadThirdPartyEmotes(id, channel) {",
    "906": "            log(`Loading third party emotes for #${channel} (${id})... (${enabledThirdPartyEmotes.join(', ')})`, 'LTPE');",
    "907": "            const promises = [];",
    "908": "",
    "909": "            if (enabledThirdPartyEmotes.includes('7TV')) {",
    "910": "                promises.push(load7TVEmotes(id, channel));",
    "911": "            }",
    "912": "            if (enabledThirdPartyEmotes.includes('BTTV')) {",
    "913": "                promises.push(loadBTTVEmotes(id, channel));",
    "914": "            }",
    "915": "            if (enabledThirdPartyEmotes.includes('FFZ')) {",
    "916": "                promises.push(loadFFZEmotes(id, channel));",
    "917": "            }",
    "918": "",
    "919": "            await Promise.allSettled(promises);",
    "920": "            log(`Loaded!`, 'LTPE');",
    "921": "        }",
    "922": "",
    "923": "        async function load7TVEmotes(id, channel) {",
    "924": "            try {",
    "925": "                const channelRes = await fetch(`https://7tv.io/v3/users/twitch/${id}`);",
    "926": "                const channelData = await channelRes.json();",
    "927": "                process7TVEmotes(channelData.emote_set.emotes, 'Channel', 1, channel);",
    "928": "            } catch (error) {",
    "929": "                log(`7TV error: ` + error.message, 'load7TVEmotes');",
    "930": "                console.error(error);",
    "931": "                addSystemMessage(\"7TV channel emotes load error\", channel);",
    "932": "            }",
    "933": "        }",
    "934": "",
    "935": "        async function loadBTTVEmotes(id, channel) {",
    "936": "            try {",
    "937": "                const channelRes = await fetch(`https://api.betterttv.net/3/cached/users/twitch/${id}`);",
    "938": "                const channelData = await channelRes.json();",
    "939": "                processBTTVEmotes(channelData.sharedEmotes, 'Shared channel', 1, channel);",
    "940": "                processBTTVEmotes(channelData.channelEmotes, 'Channel', 2, channel);",
    "941": "            } catch (error) {",
    "942": "                log(`BTTV error: ` + error.message, 'loadBTTVEmotes');",
    "943": "                console.error(error);",
    "944": "                addSystemMessage(\"BTTV load error\", channel);",
    "945": "            }",
    "946": "        }",
    "947": "",
    "948": "        async function loadFFZEmotes(id, channel) {",
    "949": "            try {",
    "950": "                const channelRes = await fetch(`https://api.frankerfacez.com/v1/room/id/${id}`);",
    "951": "                const channelData = await channelRes.json();",
    "952": "                const setId = channelData.room.set;",
    "953": "                const setRes = await fetch(`https://api.frankerfacez.com/v1/set/${setId}`);",
    "954": "                const setData = await setRes.json();",
    "955": "                processFFZEmotes(setData.set.emoticons, 'Channel', 1, channel);",
    "956": "            } catch (error) {",
    "957": "                log(`FFZ error: ` + error.message, 'loadFFZEmotes');",
    "958": "                console.error(error);",
    "959": "                addSystemMessage(\"FFZ load error\", channel);",
    "960": "            }",
    "961": "        }",
    "962": "",
    "963": "        // #PROCCESS EMOTES",
    "964": "        function processBTTVEmotes(emotes, prefix, type_id, channel) {",
    "965": "            emotes.forEach(e => {",
    "966": "                try {",
    "967": "                    channels[channel].emotes[e.code] = {",
    "968": "                        url: `https://cdn.betterttv.net/emote/${e.id}/3x`,",
    "969": "                        service: 'bttv',",
    "970": "                        type: prefix,",
    "971": "                        type_id: type_id,",
    "972": "                        is_zero_lenght: false,",
    "973": "                        author: (prefix != 'Global' ? (prefix != 'Channel' ? (e.hasOwnProperty('user') && e.user.hasOwnProperty('name') ? e.user.name : '<suspended user>') : channel) : 'BTTV'),",
    "974": "                        author_url: (e.hasOwnProperty('user') && e.user.hasOwnProperty('id')) || e.hasOwnProperty('userId') ? `https://betterttv.com/users/${(prefix != 'Global' & prefix != 'Channel' ? e.user.id : e.userId)}` : '',",
    "975": "                        emote_url: `https://betterttv.com/emotes/${e.id}`,",
    "976": "                        id: e.id,",
    "977": "                        original_name: e.code,",
    "978": "                        name: e.code",
    "979": "                    };",
    "980": "                } catch (error) {",
    "981": "                    log(`BTTV emote process error`, 'PBTTVE');",
    "982": "                    console.error(error);",
    "983": "                }",
    "984": "            });",
    "985": "        }",
    "986": "",
    "987": "        function processFFZEmotes(emotes, prefix, type_id, channel) {",
    "988": "            emotes.forEach(e => {",
    "989": "                try {",
    "990": "                    const size = Math.min(4, Math.floor(emotesSize * 2)); // 1x, 2x или 4x",
    "991": "                    channels[channel].emotes[e.name] = {",
    "992": "                        url: e.urls[size] || e.urls['2'],",
    "993": "                        service: 'ffz',",
    "994": "                        type: prefix,",
    "995": "                        type_id: type_id,",
    "996": "                        is_zero_lenght: false,",
    "997": "                        author: e.hasOwnProperty('owner') && e.owner.hasOwnProperty('display_name') ? e.owner.display_name : '<suspended user>',",
    "998": "                        author_url: e.hasOwnProperty('owner') && e.owner.hasOwnProperty('display_name') ? `https://www.frankerfacez.com/${e.owner.display_name}/submissions` : '',",
    "999": "                        emote_url: `https://www.frankerfacez.com/emoticon/${e.id}-${e.name}`,",
    "1000": "                        id: e.id,",
    "1001": "                        original_name: e.name,",
    "1002": "                        name: e.name",
    "1003": "                    };",
    "1004": "                } catch (error) {",
    "1005": "                    log(`FFZ emote process error`, 'PFFZE');",
    "1006": "                    console.error(error);",
    "1007": "                }",
    "1008": "            });",
    "1009": "        }",
    "1010": "",
    "1011": "        function process7TVEmotes(emotes, prefix, type_id, channel) {",
    "1012": "            emotes.forEach(e => {",
    "1013": "                try {",
    "1014": "                    const bestQuality = e.data.host.files.reduce((best, current) =>",
    "1015": "                        current.width > best.width ? current : best",
    "1016": "                    );",
    "1017": "                    channels[channel].emotes[e.name] = {",
    "1018": "                        url: `https:${e.data.host.url}/${bestQuality.name}`,",
    "1019": "                        service: '7tv',",
    "1020": "                        type: prefix,",
    "1021": "                        type_id: type_id,",
    "1022": "                        is_zero_lenght: e.data.flags == 256,",
    "1023": "                        author: e.data.hasOwnProperty('owner') && e.data.owner.hasOwnProperty('display_name') ? e.data.owner.display_name : '<suspended user>',",
    "1024": "                        author_url: e.data.hasOwnProperty('owner') && e.data.owner.hasOwnProperty('id') ? `https://7tv.app/users/${e.data.owner.id}` : '',",
    "1025": "                        emote_url: `https://7tv.app/emotes/${e.id}`,",
    "1026": "                        id: e.id,",
    "1027": "                        original_name: e.data.name,",
    "1028": "                        name: e.name",
    "1029": "                    };",
    "1030": "                } catch (error) {",
    "1031": "                    log(`7TV emote process error`, 'P7TVE');",
    "1032": "                    console.error(error);",
    "1033": "                }",
    "1034": "            });",
    "1035": "        }",
    "1036": "        // |==========================|",
    "1037": "",
    "1038": "",
    "1039": "        // |========== TABS ==========|",
    "1040": "        function initTab(channelName) {",
    "1041": "            log(`Inititalization for #${channelName}...`, 'TABINIT');",
    "1042": "            const tabsContainer = document.getElementById('tabs-container');",
    "1043": "            const tab = document.createElement('div');",
    "1044": "            tab.className = 'tab';",
    "1045": "            tab.id = `tab-${channelName}`;",
    "1046": "            tab.textContent = channelName;",
    "1047": "            tab.addEventListener('click', () => switchChannel(channelName));",
    "1048": "            tabsContainer.appendChild(tab);",
    "1049": "",
    "1050": "            const chat = document.createElement('div');",
    "1051": "            chat.id = `chat-${channelName}`;",
    "1052": "            chat.className = 'chat-container';",
    "1053": "            chat.style.display = 'none';",
    "1054": "            document.body.insertBefore(chat, document.getElementById('input-container'));",
    "1055": "",
    "1056": "            channels[channelName] = {",
    "1057": "                chat: chat,",
    "1058": "                messages: [],",
    "1059": "                emotes: {},",
    "1060": "                badges: {},",
    "1061": "                tab: tab",
    "1062": "            };",
    "1063": "            log(`Inititalized!`, 'TABINIT');",
    "1064": "        }",
    "1065": "",
    "1066": "        function switchChannel(channelName) {",
    "1067": "            let oldChannel = activeChannel;",
    "1068": "            ",
    "1069": "            if (activeChannel) {",
    "1070": "                channels[activeChannel].chat.style.display = 'none';",
    "1071": "            }",
    "1072": "            activeChannel = channelName;",
    "1073": "            channels[activeChannel].chat.style.display = 'block';",
    "1074": "            channels[activeChannel].chat.scrollTop = channels[activeChannel].chat.scrollHeight;",
    "1075": "            inputEl.style.display = 'block';",
    "1076": "",
    "1077": "            if (oldChannel) {",
    "1078": "                let oldChannelTabEl = document.getElementById(`tab-${oldChannel}`);",
    "1079": "                oldChannelTabEl.classList.remove('active');",
    "1080": "            }",
    "1081": "            let newChannelTabEl = document.getElementById(`tab-${channelName}`);",
    "1082": "            newChannelTabEl.className = 'tab active';",
    "1083": "",
    "1084": "            log(`#${oldChannel} → #${activeChannel}`, 'SC');",
    "1085": "        }",
    "1086": "",
    "1087": "        document.getElementById('add-tab-btn').addEventListener('click', () => {",
    "1088": "            let newChannel = prompt('Enter channel name:');",
    "1089": "            if (newChannel) {",
    "1090": "                newChannel = newChannel.toLowerCase();",
    "1091": "",
    "1092": "                if (!channels[newChannel]) {",
    "1093": "                    log(`Adding new channel - #${newChannel}`, 'ATBC');",
    "1094": "                    initTab(newChannel);",
    "1095": "                    switchChannel(newChannel);",
    "1096": "                    loadChannelData(newChannel);",
    "1097": "                    log(`#${newChannel} added!`, 'ATBC');",
    "1098": "                }",
    "1099": "            }",
    "1100": "        });",
    "1101": "",
    "1102": "        async function loadChannelData(channelName) {",
    "1103": "            log(`Loading channel data for #${channelName}...`, 'LCD');",
    "1104": "            const channelData = channels[channelName];",
    "1105": "",
    "1106": "            const id = await getBroadcasterId(channelName, clientId, token);",
    "1107": "            if (id) {",
    "1108": "                channelData.broadcasterId = id;",
    "1109": "",
    "1110": "                await Promise.allSettled([",
    "1111": "                    loadBadges(clientId, token, id, channelName),",
    "1112": "                    loadThirdPartyEmotes(channelData.broadcasterId, channelName)",
    "1113": "                ]);",
    "1114": "",
    "1115": "                addSystemMessage('Third-party emotes loaded', channelName);",
    "1116": "                await loadHistoricalMessages(channelName);",
    "1117": "",
    "1118": "                sendSocket(`JOIN #${channelName}`);",
    "1119": "                log(`Data for #${channelName} was loaded!`, 'LCD');",
    "1120": "            }",
    "1121": "            else {",
    "1122": "                addSystemMessage('This channel was not found!', channelName);",
    "1123": "                log(`#${channelName} was not found!`, 'LCD');",
    "1124": "            }",
    "1125": "        }",
    "1126": "        // |==========================|",
    "1127": "",
    "1128": "        // START",
    "1129": "        async function init() {",
    "1130": "            log(`Waking up...`, 'INIT');",
    "1131": "            // Existing badge loading logic...",
    "1132": "            await Promise.allSettled([",
    "1133": "                loadGlobalBadges(clientId, token),",
    "1134": "                loadGlobalThirdPartyEmotes()",
    "1135": "            ]);",
    "1136": "",
    "1137": "            log(`Good morning!`, 'INIT');",
    "1138": "            log(`Emotes loaded: ${Object.keys(channels[\"global\"].emotes).length}`, 'INIT');",
    "1139": "            connect();",
    "1140": "        }",
    "1141": "",
    "1142": "        // LOG",
    "1143": "        function log(text, section) {",
    "1144": "            const sectionStyle = `",
    "1145": "                background-image: linear-gradient(67.5deg, #ff8659, #ffcbb8);",
    "1146": "                color: transparent;",
    "1147": "                background-clip: text;",
    "1148": "            `;",
    "1149": "            if (console_timestamp_disable) {",
    "1150": "                console.log(`[%c${section}%c] ${text}`, sectionStyle, '');",
    "1151": "            } else {",
    "1152": "                console.log(`[%c${new Date() - startTime}%c] [%c${section}%c] ${text}`, sectionStyle, '', sectionStyle, '');",
    "1153": "            }",
    "1154": "        }"
  },
  "script-version": "3E9",
  "last-update": "06/24/2025 05:21:17",
  "script-name": "catTyper-main",
  "author": "itzkitb",
  "url": "https://itzkitb.lol/"
}
